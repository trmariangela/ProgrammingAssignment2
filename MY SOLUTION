## The makeCachematrix function creates a special "matrix" object that can cache its inverse
## We are following the example of the programming assignment 2 that you can see here:
## https://class.coursera.org/rprog-002/human_grading/view/courses/972078/assessments/3/submissions
## We replace "numeric" with "matrix", "m" with inverse,  "mean" with "ginv", "setmean" with "setinverse",
## "getmean" wirh "getinverse"



makeCachematrix<- function(x=matrix()) {
  inverse<-NULL
  set<-function (y){
    x<<-y
    inverse<<-NULL
  }
  get<-function()x
  
  
  ## Now we need a function that computes the inverse of a matrix  
  ## GINV( matrix) Function computes the generalized inverse where matrix is a numeric matrix or literal. 
##The GINV function creates the Moore-Penrose generalized inverse of a matrix. 

  ginv<-function(X, tol = sqrt(.Machine$double.eps))
  {        dnx <- dimnames(X)
    if(is.null(dnx)) dnx <- vector("list", 2)
    s <- svd(X)
    nz <- s$d > tol * s$d[1]
    structure(
      if(any(nz)) s$v[, nz] %*% (t(s$u[, nz])/s$d[nz]) else X,
      dimnames = dnx[2:1])
  }
  
  ## Now we continue with  the rest of the makeCachematrix function
  
  setinverse<-function (ginv)inverse<<-ginv
  getinverse<-function()inverse
  list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}


##The cacheSolve  function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed), 
##then the cachesolve should retrieve the inverse from the cache.

cacheSolve<-function(x,...){
  inverse<-x$getinverse()
  if(!is.null(inverse)) {message("getting cached data")
  return(inverse)
}
data<-x$get()
invesre<-ginv(data,...)
x$setinverse(inverse)
inverse
}
