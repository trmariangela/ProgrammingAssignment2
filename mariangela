##This function creates a special "matrix" object that can cache its inverse

makeCachematrix<- function(x=matrix()) {
  inverse<-NULL
  set<-function (y){
    x<<-y
    inverse<<-NULL
  }
  get<-function()x
  ##GINV Function computes the generalized inverse: GINV( matrix)where matrix is a numeric matrix or literal. 
##The GINV function creates the Moore-Penrose generalized inverse of matrix. 
  ginv<-function(X, tol = sqrt(.Machine$double.eps))
  {        dnx <- dimnames(X)
    if(is.null(dnx)) dnx <- vector("list", 2)
    s <- svd(X)
    nz <- s$d > tol * s$d[1]
    structure(
      if(any(nz)) s$v[, nz] %*% (t(s$u[, nz])/s$d[nz]) else X,
      dimnames = dnx[2:1])
  }
  
  setinverse<-function (ginv)inverse<<-ginv
  getinverse<-function()inverse
  list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
##This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##If the inverse has already been calculated (and the matrix has not changed), 
##then the cachesolve should retrieve the inverse from the cache.

cacheSolve<-function(x,...){
  inverse<-x$getinverse()
  if(!is.null(inverse)) {message("getting cached data")
  return(inverse)
}
data<-x$get()
invesre<-ginv(data,...)
x$setinverse(inverse)
inverse
}
